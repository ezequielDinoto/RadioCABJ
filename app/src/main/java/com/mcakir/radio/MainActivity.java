package com.mcakir.radio;import android.content.SharedPreferences;import android.graphics.Color;import android.media.MediaPlayer;import android.os.Bundle;import android.support.annotation.ColorRes;import android.support.v7.app.AppCompatActivity;import android.support.v7.app.AppCompatDelegate;import android.support.v7.widget.CardView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.view.View;import android.widget.AdapterView;import android.widget.CompoundButton;import android.widget.ImageButton;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.SeekBar;import android.widget.Switch;import android.widget.TextView;import android.widget.Toast;import com.mcakir.radio.player.PlaybackStatus;import com.mcakir.radio.player.RadioManager;import com.mcakir.radio.util.Shoutcast;import com.mcakir.radio.util.ShoutcastHelper;import com.mcakir.radio.util.ShoutcastListAdapter;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import butterknife.OnItemClick;public class MainActivity extends AppCompatActivity {    @BindView(R.id.toolbar)    Toolbar toolbar;    @BindView(R.id.playTrigger)    ImageButton trigger;    @BindView(R.id.listview)    ListView listView;    @BindView(R.id.switch1)    Switch switch1;    @BindView(R.id.LinearL)    LinearLayout LinearL;   // @BindView(R.id.list_item)   // @BindView(R.id.carView)  //  CardView cardView; /*   @BindView(R.id.text)    TextView text ;*/    // Boolean isSelected;  /*  @BindView(R.id.search)    SearchView search;*/    /*@BindView(R.id.volume_bar)    SeekBar volumen_bar;*/    List<Shoutcast> shoutcasts;    ShoutcastListAdapter shoutcastListAdapter;    // ProgressDialog progressDialog;    @BindView(R.id.name)    TextView textView;    @BindView(R.id.sub_player)    View subPlayer;    RadioManager radioManager;    String streamURL;    int mSeekBarProgress;    MediaPlayer mediaPlayer;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);       /* switch1.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (switch1.isChecked()){                    setDayNight(0);                } else {                    setDayNight(1);                }            }        });*/        ButterKnife.bind(this);        setSupportActionBar(toolbar);        radioManager = RadioManager.with(this);        //progressDialog = new ProgressDialog(this);        //shoutcastListAdapter = new ArrayList<Shoutcast>(this,R.layout.list_item,)        listView.setAdapter(new ShoutcastListAdapter(this, ShoutcastHelper.retrieveShoutcasts(this)));        //listView.setAdapter(shoutcastListAdapter);       /* search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String query) {                progressDialog.setTitle("Radio" + query);                progressDialog.show();                return true;            }            @Override            public boolean onQueryTextChange(String newText) {                return true;            }        });*/    /*    volumen_bar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar volumen_bar, int progress, boolean fromUser) {                //Actualiza el valor del progreso de la SeekBar                //y realiza acciones segun sea necesario              mSeekBarProgress = progress;              int newPosition = (mediaPlayer.getDuration() * progress / 100);              mediaPlayer.seekTo(newPosition);            }            @Override            public void onStartTrackingTouch(SeekBar volumen_bar) {                //se llama cuando el user empieza a arrastrar el seebar            }            @Override            public void onStopTrackingTouch(SeekBar volumen_bar) {                //se llama cuando el user deja de arrastrar el seekbar            }        });*/        switch1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {            @Override            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {                if (switch1.isChecked()){                    updateTheme("DARK","#3F51B5", "#FFEB3B");                } else {                    updateTheme("DEFAULT", "#FFEB3B", "#3F51B5");                }            }        });        loadTheme();    }//aca  /*  private void miPlay(){    }*/    public void updateTheme(String key, String c1, String c2)     {        SharedPreferences savePreferences = getSharedPreferences("config_theme", MODE_PRIVATE);        SharedPreferences.Editor ObjtEditor = savePreferences.edit();        ObjtEditor.putString("theme", key);        ObjtEditor.commit();        LinearL.setBackgroundColor(Color.parseColor(c1));        listView.setBackgroundColor(Color.parseColor(c2));       // text.setTextColor(Color.parseColor(c1));        //cardView.setCardBackgroundColor(Color.parseColor(c2));        //text.setTextColor(Color.parseColor(c4));    }    public void loadTheme() {        SharedPreferences loadPreferences = getSharedPreferences("config_theme", MODE_PRIVATE);        String actualTheme = loadPreferences.getString("theme", "DEFAULT");        if (actualTheme.equals("DEFAULT")) {            updateTheme("DEFAULT", "#FFEB3B", "#3F51B5");        } else if (actualTheme.equals("DARK")){            updateTheme("DARK","#3F51B5", "#FFEB3B");            switch1.setChecked(true);        }    }  /*  public void setDayNight(int mode){        if (mode == 0){            getDelegate().setLocalNightMode(AppCompatDelegate.MODE_NIGHT_YES);        } else {            getDelegate().setLocalNightMode(AppCompatDelegate.MODE_NIGHT_NO);        }    }*/    @Override    public void onStart() {        super.onStart();        EventBus.getDefault().register(this);    }    @Override    public void onStop() {        EventBus.getDefault().unregister(this);        super.onStop();    }    @Override    protected void onDestroy() {        radioManager.unbind();        super.onDestroy();    }    @Override    protected void onResume() {        super.onResume();        radioManager.bind();    }    @Override    public void onBackPressed() {        finish();    }    @Subscribe    public void onEvent(String status){        switch (status){            case PlaybackStatus.LOADING:                // loading                break;            case PlaybackStatus.ERROR:                Toast.makeText(this, R.string.no_stream, Toast.LENGTH_SHORT).show();                break;        }        trigger.setImageResource(status.equals(PlaybackStatus.PLAYING)                ? R.drawable.ic_pause_black                : R.drawable.ic_play_arrow_black);    }    @OnClick(R.id.playTrigger)    public void onClicked(){        if(TextUtils.isEmpty(streamURL)) return;        radioManager.playOrPause(streamURL);    }    @OnItemClick(R.id.listview)    public void onItemClick(AdapterView<?> parent, View view, int position, long id){        Shoutcast shoutcast = (Shoutcast) parent.getItemAtPosition(position);        if(shoutcast == null){            return;        }        textView.setText(shoutcast.getName());        subPlayer.setVisibility(View.VISIBLE);        streamURL = shoutcast.getUrl();        radioManager.playOrPause(streamURL);    }}